using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

class ComputerPart
{
    public string Type { get; set; }
    public string Name { get; set; }
    public string Parameters { get; set; }
    public int Price { get; set; }
}

class Program
{
    static List<ComputerPart> computerParts = new List<ComputerPart>();

    static void Main()
    {
        LoadData();

        while (true)
        {
            Console.WriteLine("1. Add New Component");
            Console.WriteLine("2. Search");
            Console.WriteLine("3. Statistics");
            Console.WriteLine("4. Set Discounted Prices");
            Console.WriteLine("5. Generate HTML Code");
            Console.WriteLine("6. Exit");

            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    AddNewPart();
                    break;
                case 2:
                    Search();
                    break;
                case 3:
                    Statistics();
                    break;
                case 4:
                    SetDiscount();
                    break;
                case 5:
                    GenerateHtml();
                    break;
                case 6:
                    SaveData();
                    Environment.Exit(0);
                    break;
                default:
                    Console.WriteLine("Invalid option. Please, try again.");
                    break;
            }
        }
    }

    static void LoadData()
    {
        if (File.Exists("computer_parts.txt"))
        {
            string[] lines = File.ReadAllLines("computer_parts.txt");
            foreach (string line in lines)
            {
                string[] data = line.Split(';');
                ComputerPart part = new ComputerPart
                {
                    Type = data[0],
                    Name = data[1],
                    Parameters = data[2],
                    Price = int.Parse(data[3])
                };
                computerParts.Add(part);
            }
        }
    }

    static void SaveData()
    {
        List<string> lines = new List<string>();
        foreach (ComputerPart part in computerParts)
        {
            lines.Add($"{part.Type};{part.Name};{part.Parameters};{part.Price}");
        }
        File.WriteAllLines("computer_parts.txt", lines);
    }

    static void AddNewPart()
    {
        Console.WriteLine("Type: ");
        string type = Console.ReadLine();

        Console.WriteLine("Name: ");
        string name = Console.ReadLine();

        Console.WriteLine("Parameters: ");
        string parameters = Console.ReadLine();

        Console.WriteLine("Price: ");
        int price = int.Parse(Console.ReadLine());

        ComputerPart newPart = new ComputerPart
        {
            Type = type,
            Name = name,
            Parameters = parameters,
            Price = price
        };

        computerParts.Add(newPart);

        SaveData();

        Console.WriteLine("Component added successfully!");
    }

    static void Search()
    {
        Console.WriteLine("Search by type or name: ");
        string searchTerm = Console.ReadLine();

        var results = computerParts.Where(part =>
            part.Type.ToLower().Contains(searchTerm.ToLower()) ||
            part.Name.ToLower().Contains(searchTerm.ToLower())
        );

        PrintResults(results);
    }

    static void PrintResults(IEnumerable<ComputerPart> results)
    {
        foreach (ComputerPart part in results)
        {
            Console.WriteLine($"Type: {part.Type}, Name: {part.Name}, Parameters: {part.Parameters}, Price: {part.Price} Ft");
        }
    }

    static void Statistics()
    {
        int intelCount = computerParts.Count(part => part.Type.ToLower().Contains("intel"));
        int amdCount = computerParts.Count(part => part.Type.ToLower().Contains("amd"));
        int nvidiaCount = computerParts.Count(part => part.Type.ToLower().Contains("nvidia"));
        int amdGraphicsCount = computerParts.Count(part => part.Type.ToLower().Contains("amd") && part.Type.ToLower().Contains("graphics"));

        Console.WriteLine($"Number of CPUs manufactured by Intel: {intelCount}");
        Console.WriteLine($"Number of CPUs manufactured by AMD: {amdCount}");
        Console.WriteLine($"Number of GPUs manufactured by Nvidia: {nvidiaCount}");
        Console.WriteLine($"Number of GPUs manufactured by AMD: {amdGraphicsCount}");
    }

    static void SetDiscount()
    {
        Console.WriteLine("Please set the discount percentage: ");
        int discountPercentage = int.Parse(Console.ReadLine());

        Console.WriteLine("Please choose the type of component (or leave empty to include all): ");
        string typeFilter = Console.ReadLine();

        foreach (ComputerPart part in computerParts)
        {
            if (string.IsNullOrEmpty(typeFilter) || part.Type.ToLower().Contains(typeFilter.ToLower()))
            {
                double discountedPrice = part.Price * (1 - discountPercentage / 100.0);
                part.Price = (int)Math.Round(discountedPrice);
            }
        }

        Console.WriteLine("Discounted prices set successfully!");
    }
    static void GenerateHtml()
    {
        StringBuilder htmlBuilder = new StringBuilder();

        htmlBuilder.AppendLine("<div style=\"display: flex; flex-wrap: wrap;\">");

        foreach (ComputerPart part in computerParts)
        {
            htmlBuilder.AppendLine($"  <div style=\"border: 1px solid #ccc; padding: 10px; margin: 10px; flex: 0 0 300px;\">");
            htmlBuilder.AppendLine($"    <p><strong>Típus:</strong> {part.Type}</p>");
            htmlBuilder.AppendLine($"    <p><strong>Név:</strong> {part.Name}</p>");
            htmlBuilder.AppendLine($"    <p><strong>Paraméterek:</strong> {part.Parameters}</p>");
            htmlBuilder.AppendLine($"    <p><strong>Ár:</strong> {part.Price} Ft</p>");
            htmlBuilder.AppendLine($"  </div>");
        }

        htmlBuilder.AppendLine("</div>");

        File.WriteAllText("generated_html.html", htmlBuilder.ToString());

        Console.WriteLine("Az HTML kód generálva a generated_html.html fájlba.");
    }
}
